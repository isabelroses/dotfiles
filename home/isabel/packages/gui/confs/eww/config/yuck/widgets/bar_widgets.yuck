(defwidget panel_launcher [] (box :class "button-bin launcher"
    (button
      :class "button launcher"
      :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu app_launcher"
      (label :class "icon" :text "" :halign "center")
    )
  ))

(defwidget panel_workspaces [orientation] (box :class "button-bin"
  (eventbox
    :class "button workspaces"
    :onscroll "echo {} | sed -e \"s/up/-1/g\" -e \"s/down/+1/g\" | xargs hyprctl dispatch workspace"
    (box
      :space-evenly false
      :orientation orientation
      (for i in workspace
        (button
          :onclick "hyprctl dispatch workspace ${i.num}"
          :class "workspace-btn"
          :valign "center"
          (label
            :class "${i.focus}"
            :text "${ws-icons[i.id]}"
          )
        )
      )
    )
  )
))

(defwidget panel_separator [orientation dots visible] (box
    :orientation orientation
    :class "separator"
    :space-evenly false
    :visible visible
    (for dot in dots
      (box :class "dot" :halign "center" :hexpand true :valign "center"))))

(defwidget controls_slider [control reveal value onchange icon orientation transition] (eventbox
    :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
      :space-evenly false
      :orientation orientation
      (revealer
        :transition transition
        :duration "300ms"
        :reveal reveal
        :class "reveal"
        (eventbox :class "slider ${orientation}" (scale
            :orientation orientation
            :flipped {orientation == "v"}
            :value value
          :onchange onchange)))
      (label
        :class "${control} icon"
      :text icon)
    )
  ))

(defwidget controls_icon [control reveal value icon style angle orientation transition visible] (eventbox
    :visible visible
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
      :space-evenly false
      :orientation orientation
      (revealer
        :transition transition
        :duration "300ms"
        :reveal reveal
        :class "reveal"
        (label
          :class "${style} ${control}"
          :angle angle
        :text value)
      )
      (label
        :class "${style} ${control} icon"
      :text icon)
    )
  ))

(defvar bluetooth_reveal false)
(defvar bt_speaker_reveal false)
(defvar mute_reveal false)
(defvar notifications_reveal false)
(defvar battery_reveal false)
(defvar network_reveal false)
(defvar volume_reveal false)
(defvar screen_reveal false)
(defwidget panel_controls [orientation] (box
    :class "controls"
    :orientation orientation
    :space-evenly false
    (controls_icon
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "bluetooth"
      :reveal bluetooth_reveal
      :visible {bluetooth.state == "on"}
      :value {arraylength(bluetooth.connected_devices) == 0 ? "Not Connected" : bluetooth.connected_devices[0].name}
      :icon {bluetooth.icon}
      :style {bluetooth.state}
    :angle {orientation == "v" ? 90 : 0})
    (controls_icon
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "bt_speaker"
      :reveal bt_speaker_reveal
      :visible {arraylength(bluetooth.connected_devices) > 0}
      :value {bluetooth.connected_devices[0].name}
      :icon {bluetooth.connected_devices[0].icon}
      :style ""
    :angle {orientation == "v" ? 90 : 0})
    (controls_icon
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "mute"
      :reveal mute_reveal
      :visible {volume.mute.state == "on"}
      :value "Muted"
      :icon {volume.mute.icon}
      :style ""
    :angle {orientation == "v" ? 90 : 0})
    (controls_slider
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "volume"
      :reveal volume_reveal
      :value {volume.level}
      :onchange "${EWW_CONFIG_DIR}/scripts/volume set {}"
    :icon {volume.icon})
    (controls_slider
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "screen"
      :reveal screen_reveal
      :value {brightness.screen.level}
      :onchange "${EWW_CONFIG_DIR}/scripts/brightness set_screen {}"
    :icon {brightness.screen.icon})
    (controls_icon
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "network"
      :reveal network_reveal
      :visible true
      :value {network.wifi.ssid}
      :icon {network[network.primary].icon}
      :style {network[network.primary].style}
    :angle {orientation == "v" ? 90 : 0})
    (controls_icon
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "battery"
      :reveal battery_reveal
      :visible {battery.availabe}
      :value {battery.percent}
      :icon {battery.icon}
      :style {battery.state}
    :angle 0)
    (controls_icon
      :orientation orientation
      :transition {orientation == "v" ? "slideup" : "slideleft"}
      :control "notifications"
      :reveal notifications_reveal
      :visible true
      :value {notifications.count}
      :icon {notifications.icon}
      :style {notifications.count > 0 ? "active" : ""}
    :angle 0)
  ))

(defwidget panel_system_indicators [orientation] (box :class "button-bin"
    (eventbox
      :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu quicksettings"
      :class "button system-indicators"
      (panel_controls :orientation orientation)
    )
  ))

(defwidget panel_powermenu [] (box :class "button-bin powermenu" (button
      :class "button powermenu"
      :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu powermenu"
      (label :class "icon" :text "")
    )))

(defwidget panel_colorpicker [] (box :class "button-bin"
    (button
      :class "button colorpicker"
      :onclick "${EWW_CONFIG_DIR}/scripts/launcher colorpicker"
      (label :class "icon" :text "󰈊")
    )
  ))
