(defwidget quick_toggles [] (box
    :class "widget toggles"
    (arrow_toggle_wifi)
    (arrow_toggle_bt)
    (arrow_toggle_power)
))

(defwidget quick_toggles_grid [] (box
    :class "widget toggles"
    :orientation "h"
    (box
        :orientation "v"
        (small_toggle_dnd)
        (small_toggle_mute))
    (box
        :orientation "v"
        (small_toggle_dark_mode)
        (small_toggle_night_light))
))

(defwidget syslevels [] (box
    :class "system"
    :orientation "v"
    (box :orientation "h"
        (sysprogress_cpu)
        (sysprogress_ram)
    )
    (box :orientation "h"
        (sysprogress_temp)
        (sysprogress_bat)
    )
))

(defwidget quick_sys_actions [] (box
    :class "sys-actions"
    :space-evenly false
    (user
        :show_name true
        :class "widget")
    (box
        :class "sysactions widget"
        :orientation "v"
        :space-evenly false
        :hexpand true
        (box
            (button :onclick "${EWW_CONFIG_DIR}/scripts/launcher config" 
                    :class "settings" (label :text ""))
            (button :onclick "${EWW_CONFIG_DIR}/scripts/launcher screenlock"
                    :class "lock"     (label :text ""))
            (button :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu powermenu"
                    :class "power"    (label :text ""))
        )
        (label
            :valign "END"
            :vexpand true
            :class "uptime"
            :halign "END"
            :text "uptime: ${uptime}"
        )
    )
))

(defwidget quicksettings [valign halign] (box
    :valign valign
    :halign halign
    :class "quick-settings"
    :orientation "v"
    :space-evenly false
    (quick_sys_actions)
    (sys_sliders :class "widget")
    (quick_toggles)
    (box
        (quick_toggles_grid)
        (syslevels)
    )
    (label :text media_positions :visible false) ;so it is active
    (for player in {media.players}
        (media_player :player player ))
))
